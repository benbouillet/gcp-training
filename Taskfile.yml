---
version: "3"

silent: true

tasks:
  deploy:
    desc: Deploys the stack
    dotenv: [".env"]
    cmds:
      - task: _rm-providers
      - task: init
      - task: validate
      - task: plan
      - task: infracost
      - task: trivy-tf-scan
      - task: user-confirmation
      - task: apply
    preconditions:
      - sh: "gcloud compute regions list --project $TF_VAR_gcp_project_id"
        msg: "No GCloud authentication credentials found. Cancelling task."

  destroy:
    desc: Destroys the stack
    dotenv: [".env"]
    cmds:
      - task: _rm-providers
      - task: init
      - task: validate
      - task: plan-destroy
      - task: user-confirmation
      - task: apply
    preconditions:
      - sh: "gcloud compute regions list"
        msg: "No GCloud authentication credentials found. Cancelling task."

  user-confirmation:
    interactive: true
    status:
      - "[[ $AUTOAPPROVE = 1 ]]"
    cmds:
      - |
        read -p "Apply?[yY/nN] " -r
        echo    # (optional) move to a new line
        if [[ ! $REPLY =~ ^[Yy]$ ]]
        then
            exit 1
        fi

  infracost:
    desc: Estimates the monthly costs of the stack
    cmds:
      - |
        if [ ${INFRACOST_API_KEY} = null ]; then
          echo "INFRACOST_API_KEY variable is empty. Ignoring costs estimation."
        else
          infracost breakdown --path .
        fi

  _rm-providers:
    status:
      - "[[ $NOINIT = 1 ]]"
    cmds:
      - |
        echo "Removing Terraform modules cached folder"
        rm -rf .terraform

  trivy-tf-scan:
    dotenv: [".env"]
    cmds:
      - trivy conf --cache-dir /tmp/trivy/ tfplan

  init:
    dotenv: [".env"]
    preconditions:
      - "[[ $IAC_BUCKET != null ]]"
    cmds:
      - terraform init -backend-config="bucket=${IAC_BUCKET}"

  validate:
    cmds:
      - terraform validate

  plan:
    dotenv: [".env"]
    cmds:
      - terraform plan -out tfplan

  plan-destroy:
    dotenv: [".env"]
    cmds:
      - terraform plan -destroy -out tfplan

  apply:
    dotenv: [".env"]
    cmds:
      - terraform apply tfplan

  list:
    dotenv: [".env"]
    cmds:
      - terraform state list

  show:
    dotenv: [".env"]
    cmds:
      - terraform state show {{.CLI_ARGS}}

  output:
    dotenv: [".env"]
    cmds:
      - terraform output {{.CLI_ARGS}}
